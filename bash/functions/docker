#!/usr/bin/env bash

log.debug.filepath;

function docker.uninstall(){
    # [https://docs.docker.com/engine/install/debian/#uninstall-old-versions]
    function.requires apt || return 1;
    sudo apt remove 'containerd' 'docker-compose' 'docker-doc' 'docker.io' 'podman-docker' 'runc';
}

function docker.install(){
    # [https://docs.docker.com/engine/install/debian/#install-using-the-repository]
    function.requires apt && function.requires curl || return 1;
    local keyring repo url;
    keyring='/etc/apt/keyrings/docker.asc';
    repo="deb [arch=$(dpkg --print-architecture) signed-by=${keyring}] ${url} $(source /etc/os-release && echo "${VERSION_CODENAME}") stable";
    url='https://download.docker.com/linux/debian'; # 'https://download.docker.com/linux/ubuntu'
    docker.uninstall;
    sudo apt update && sudo apt install 'ca-certificates' 'curl';
    sudo install -m 0755 -d "${keyring%/*}";
    sudo curl --fail --silent --show-error --location "${url}/gpg" -o "${keyring}";
    sudo chmod a+r "${keyring}";
    echo "${repo}" | sudo tee '/etc/apt/sources.list.d/docker.list' > /dev/null;
    sudo apt update && sudo apt install 'docker-ce' 'docker-ce-cli' 'containerd.io' 'docker-buildx-plugin' 'docker-compose-plugin';
    sudo docker run 'hello-world';
}

function docker.containerID(){
    function.requires docker || return 1;
    local image_name;
    args image_name;
    sudo docker ps --all --quiet --filter "ancestor=${image_name}"; # [How to filter docker process based on image](https://stackoverflow.com/a/33573321/13019084)
}

function docker.imageID(){
    function.requires docker || return 1;
    local image_name;
    args image_name;
    sudo docker images --quiet --filter "reference=${image_name}";
}

function docker.rm(){
    function.requires docker || return 1;
    local image_name container_ids;
    args image_name;
    container_ids=$(docker.containerID "${image_name}");
    if [[ -n "${container_ids}" ]]; then
        sudo docker stop "${container_ids}";
        sudo docker rm "${container_ids}";
    fi
}

function docker.rmi(){
    function.requires docker || return 1;
    local image_name image_id;
    args image_name;
    image_id=$(docker.imageID "${image_name}");
    docker.rm "${image_name}";
    sudo docker rmi "${image_id}";
}

function docker.runInteractive(){
    function.requires docker || return 1;
    local image_name container_name image_id;
    args image_name container_name;
    image_id=$(docker.imageID "${image_name}");
    sudo docker run --interactive --tty --name "${container_name}" "${image_id}" '/bin/bash';
}
