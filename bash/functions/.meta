#!/usr/bin/env bash

log.debug.filepath;

# [https://www.binaryphile.com/bash/2018/09/17/approach-bash-like-a-developer-part-22.5-naming-and-namespaces.html#variable-namespaces]

function assign.nameref(){
    # [https://mywiki.wooledge.org/BashFAQ/006#Assigning_indirect.2Freference_variables]
    # [https://www.gnu.org/software/bash/manual/html_node/Shell-Parameters.html]
    # [Assigning one variable to another in Bash?](https://stackoverflow.com/a/73319606/13019084)
    local -n ref="$1";
    ref="$2";
    log DEBUG "$(declare -p ${!ref})";
}

function assign.printfv(){
    # [https://mywiki.wooledge.org/BashFAQ/006#Assigning_indirect.2Freference_variables]
    printf -v "$1" "%s" "$2"; # note that `printf -v` doesn't support direct assignment to array indexes for BASH<4.1 [https://bash-hackers.docs.cern.ch/commands/builtin/printf#options]
    log DEBUG "$(declare -p $1)"; # [https://bash-hackers.docs.cern.ch/commands/builtin/declare]
}

function assign.indirect(){
    # [https://mywiki.wooledge.org/BashFAQ/006#Assigning_indirect.2Freference_variables]
    # [How to use a variable's value as another variable's name in bash](https://stackoverflow.com/a/9715739/13019084)
    read -r -- "$1" <<< "$2"; # [https://bash-hackers.docs.cern.ch/commands/builtin/read]
    log DEBUG "$(declare -p $1)"; # [https://bash-hackers.docs.cern.ch/commands/builtin/declare]
}

function function.requires(){
    local executable="$1";
    local executable_path="$(command -v "${executable}")";
    [[ -n "${executable_path}" ]] && [[ -x "${executable_path}" ]] && return 0;
    log ERROR "'${executable}' is required";
    return 1;
}

function function.args(){
    # Convenience metafunction to define function arguments, including optional arguments with default values
    # It expects "$FUNCNAME" (name of parent function), followed by the positional parameters passed to the parent function, folowed by an ASCII "record separator" delimiter, followed by the variable names for the parent function's required & optional arguments
    # Variable names for optional arguments should be indicated by wrapping them in square brackets, e.g `[optional_argument]`
    # A default value for optional arguments may be specified with an equal sign, e.g. `[optional_argument=default_value]`
    # The passed positional parameters are assigned to the variable names as global variables (use `local` keyword in parent function to specify local variables)
    # When calling the parent function, optional positional parameters may be ommited with a quoted empty string, ''
    # If any required parameters are missing, the expected usage (with the expected positional parameters) is printed and an exit code of 64 is returned
    local function_name param arg bracket_regex equals_regex red reset; # [https://bash-hackers.docs.cern.ch/commands/builtin/local]
    red="$(tput setaf 01)"; # [https://bash-hackers.docs.cern.ch/scripting/terminalcodes#colors_using_tput]
    reset="$(tput sgr 0 0)";
    bracket_regex='[[]([[:print:]]+)[]]'; # matches one or more 'printable' character(s) enclosed in square brackets (and groups each match into an array named "$BASH_REMATCH") [https://bash-hackers.docs.cern.ch/syntax/shellvars#bash_rematch]
    equals_regex='([[:print:]]+)[=]([[:print:]]+)'; # matches and groups one or more 'printable' character(s) followed by an '=' and matches and groups the following one or more 'printable' character(s).

    function_name="$1"; # [https://bash-hackers.docs.cern.ch/syntax/shellvars#funcname]
    shift; # [https://bash-hackers.docs.cern.ch/commands/builtin/shift]
    IFS=$'\30' read -r param arg <<< "$*"; # [Octal 34 is the ASCII "file separator" character, and is unlikely to be present in your data](https://unix.stackexchange.com/a/628543) [https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text] [https://bash-hackers.docs.cern.ch/scripting/posparams#mass_usage]
    read -r -a param <<< "${param}"; # [https://bash-hackers.docs.cern.ch/commands/builtin/read]
    read -r -a arg <<< "${arg}";
    # log DEBUG "$(declare -p function_name)";
    # log DEBUG "$(declare -p param)";
    # log DEBUG "$(declare -p arg)";

    for (( i=0; i<${#arg[@]}; i++ )); do
        if ! [[ "${arg[i]}" =~ ${bracket_regex} ]]; then # required arguments (not wrapped in square brackets)
            [[ -z "${param[i]}" ]] && { printf "%s: ${red}%s\n${reset}" "usage" "${function_name} ${arg[*]}"; return 64; } # [https://bash-hackers.docs.cern.ch/syntax/arrays#getting_values]
            [[ -n "${param[i]}" ]] && assign.indirect "${arg[i]}" "${param[i]}";
        elif [[ "${arg[i]}" =~ ${bracket_regex} ]]; then # optional arguments (wrapped in square brackets)
            opt_arg="${BASH_REMATCH[1]}"; # regex match group of characters enclosed in square brackets
            ! [[ "${opt_arg}" =~ ${equals_regex} ]] && assign.indirect "${opt_arg}" "${param[i]}";
            if [[ "${opt_arg}" =~ ${equals_regex} ]]; then
                opt_arg="${BASH_REMATCH[1]}"; # regex match group of characters before '=' character
                default_value="${BASH_REMATCH[2]}"; # regex match group of characters after '=' character
                [[ -n "${param[i]}" ]] && assign.indirect "${opt_arg}" "${param[i]}";
                [[ -z "${param[i]}" ]] && assign.indirect "${opt_arg}" "${default_value}";
            fi
        fi
    done
}

# Define an alias to pass "$FUNCNAME", positional parameters, and an ASCII "record separator" delimiter to `function.args` before passing the variable names.
# Set a trap on `ERR` signal to force the parent function to break if `function.args` returns 64.
# [https://bash-hackers.docs.cern.ch/commands/builtin/trap] [How to trap exit code in Bash script](https://stackoverflow.com/a/23637952/13019084) [Escaping characters in bash alias](https://stackoverflow.com/a/42954517)
alias args=$'trap "(( \$? == 64 )) && return 22" ERR; function.args "${FUNCNAME}" "$@" $\'\\030\''
