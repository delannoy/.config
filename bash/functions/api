#!/usr/bin/env bash

log.debug.filepath;

function deezer.search.album(){
    # https://developers.deezer.com/api/album
    function.requires jq && function.requires curl || return 1;
    local artist album url response;
    args artist album;
    url="https://api.deezer.com/search?q=artist:\"${artist// /+/}\"album:\"${album// /+}\"";
    log DEBUG "${url}";
    response="$(jq '.' <(curl --silent "${url}"))";
    album_ids="$(jq '[.data[].album.id] | unique[]' <<< "${response}")";
    for album_id in ${album_ids}; do
        url="https://api.deezer.com/album/${album_id}";
        log DEBUG "${url}";
        jq '. | {artist:.artist.name, album:.title, release_data:.release_date, number_tracks:.nb_tracks, duration:.duration, album_link:.link, cover:.cover_xl, upc:.upc}' <(curl --silent "${url}");
    done
}

function deezer.search.track(){
    # https://developers.deezer.com/api/search
    function.requires jq && function.requires curl || return 1;
    local artist track url response;
    args artist track;
    url="https://api.deezer.com/search?q=artist:\"${artist// /+/}\"track:\"${track// /+}\"";
    log DEBUG "${url}";
    response="$(jq '.' <(curl --silent "${url}"))";
    jq '.data[] | {artist:.artist.name, album:.album.title, track:.title, track_url:.link}' <<< "${response}";
}

function thesaurus(){
    # [https://shkspr.mobi/blog/2024/09/http-ftp-and-dict/]
    # [https://web.archive.org/web/20200830164200/http://www.dict.org/links.html]
    # [https://www.rfc-editor.org/rfc/rfc2229]
    function.requires curl || return 1;
    local term;
    args term;
    url="dict://dict.org/d:${term}:moby-thesaurus"
    log DEBUG "${url}"
    curl --silent "${url}";
}

function musicbrainz.search(){
    # [https://musicbrainz.org/doc/MusicBrainz_API/Search]
    function.requires jq && function.requires curl || return 1;
    local entity query jq_filter limit offset format url;
    args entity query jq_filter:='.' limit:=4 offset:=0 format:=json;
    url="https://musicbrainz.org/ws/2/${entity}?query=${query}&limit=${limit}&offset=${offset}&fmt=${format}";
    log DEBUG "${url}";
    jq --raw-output "${jq_filter}" <(curl --silent --location --user-agent "${USER_AGENT}" "${url}");
}

# musicbrainz.search release-group arid:"a630b133-bcc4-4796-9a0e-685c68b1e6ab" '."release-groups"[].title' 10

function reddit.getMP4(){
    # [https://developers.reddit.com/docs/api]
    function.requires jq && function.requires curl || return 1;
    local subreddit post_id json_path url;
    args subreddit post_id;
    json_path='.[].data.children[].data.secure_media.reddit_video.fallback_url';
    url="https://www.reddit.com/r/${subreddit}/comments/${post_id}.json";
    log DEBUG "${url}";
    jq --raw-output "${json_path} | select(. != null)" <(curl --silent --location --user-agent "${USER_AGENT}" "${url}");
}

function weather(){
    # [https://github.com/chubin/wttr.in]
    function.requires curl || return 1;
    local city;
    args city:=Geneve;
    curl "wttr.in/${city}";
}
