#!/usr/bin/env bash

if [[ -n "${BASH}" ]] && [[ $- == *i* ]];
    then (( "${_VERBOSE}" >= 3 )) && printf '%s\n' "***$(realpath "${BASH_SOURCE[0]}")***";
    else return;
fi

_venvCreatePipConf(){
    printf "%s\n%s\n" '[general]' 'require-virtualenv = true' > "${VIRTUAL_ENV}/pip.conf"; # [Requiring an active virtual environment for pip](https://docs.python-guide.org/dev/pip-virtualenv/#requiring-an-active-virtual-environment-for-pip)
    printf "%s\n%s\n" '[install]' 'user = false' >> "${VIRTUAL_ENV}/pip.conf"; # [Install to the Python user install directory for your platform](https://pip.pypa.io/en/stable/cli/pip_install/#cmdoption-user) [pip install --user misbehaves inside venv](https://github.com/pypa/pip/issues/5702)
    printf "%s\n%s\n" '[list]' 'local = true' >> "${VIRTUAL_ENV}/pip.conf"; # [If in a virtualenv that has global access, do not list globally-installed packages](https://pip.pypa.io/en/stable/cli/pip_list/#cmdoption-l)
    printf "%s\n%s\n" '[freeze]' 'local = true' >> "${VIRTUAL_ENV}/pip.conf"; # [If in a virtualenv that has global access, do not list globally-installed packages](https://pip.pypa.io/en/stable/cli/pip_freeze/#cmdoption-l)
}

_venvInstructions(){
    printf "${TXT[GREEN]}%s${TXT[reset]}\n" "Activated venv: '"${VIRTUAL_ENV}"'";
    # printf "${TXT[GREEN]}%s${TXT[reset]}\n" "location of python3 executable: '"$(command -v python3)"'";
    printf "${TXT[YELLOW]}%s${TXT[reset]}\n" "Run 'deactivate' to exit the venv";
}

_venvUserPrompt(){
    local venv_path system_site_packages;
    _args 'venv_path' 'system_site_packages';
    printf "${TXT[YELLOW]}%s${TXT[reset]}\n" "A new python3 virtual environment will be created in '"${venv_path}"'";
    if [[ "${system_site_packages}" == 'True' ]]; then
        local globalPkgPath="$(python3 -c 'import site; print(site.getsitepackages())')"; # [How do I find the location of my Python site-packages directory?](https://stackoverflow.com/a/46071447)
        printf "${TXT[RED]}%s${TXT[reset]}\n" "with access to system/global site-packages: ${globalPkgPath}";
    fi
    printf "${TXT[YELLOW]}%s${TXT[reset]}\n" "Press <ENTER> to continue...";
    read -s;
    printf "${TXT[GREEN]}%s${TXT[reset]}\n" "Setting up '"${venv_path}"' venv...";
}

listVenv(){
    printf "%s\n" "available venv:"
    find "${_VENV_DIR:-"${PWD}"}" -mindepth 1 -maxdepth 1 -type d -printf "    %f\n";
}

venv(){
    [[ -z "$1" ]] && listVenv;
    local venv_name system_site_packages venv_activate;
    _args 'venv_name' '[system_site_packages=False]';
    local venv_dir="${_VENV_DIR:-"${PWD}"}";
    mkdir --parents --verbose "${venv_dir}";
    venv_activate="${venv_dir}/${venv_name}/bin/activate";
    if [[ ! -f "${venv_activate}" ]]; then
        _venvUserPrompt "${venv_dir}/${venv_name}" "${system_site_packages}";
        [[ "${system_site_packages}" == 'True' ]] && python3 -m venv --system-site-packages "${venv_dir}/${venv_name}" || python3 -m venv "${venv_dir}/${venv_name}";
    fi
    source "${venv_activate}";
    _venvCreatePipConf;
    _venvInstructions;
}
