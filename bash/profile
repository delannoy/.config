#!/usr/bin/env bash

# [Configuring your login sessions with dot files](https://mywiki.wooledge.org/DotFiles)
# [Namespaces on the Cheap](https://www.binaryphile.com/bash/2018/09/17/approach-bash-like-a-developer-part-22.5-naming-and-namespaces.html#namespaces-on-the-cheap)

function benchmark(){
    # [Debugging slow bash startup files](https://mdjnewman.me/2017/10/debugging-slow-bash-startup-files/)
    exec 5> >(ts -i "%.s" >> /tmp/timestamps);
    export BASH_XTRACEFD='5';
    set -x;
}

# benchmark

[[ -v BASH ]] || return 0; # [BASH](https://bash-hackers.docs.cern.ch/syntax/shellvars#bash) [Misc syntax](https://bash-hackers.docs.cern.ch/commands/classictest#misc_syntax)

shopt -q login_shell || return 0; # [How to check if a shell is login/interactive/batch](https://unix.stackexchange.com/a/26782)

export LOG_LEVEL='DEBUG';
export NO_COLOR=''; # [Command-line software which adds ANSI color to its output by default should check for a NO_COLOR environment variable that, when present and not an empty string (regardless of its value), prevents the addition of ANSI color.](https://no-color.org/)

function filepath.logger(){
    # pre-calculate whether `INFO` or `DEBUG` levels should be logged (if so, define their printf format), store the results as environment variables, and define alias for startup files.
    declare -A LOG=(['NOTSET']=0 ['DEBUG']=10 ['INFO']=20 ['WARNING']=30 ['ERROR']=40 ['CRITICAL']=50); # https://docs.python.org/3/howto/logging.html#logging-levels
    export LOG_DEBUG=$(( ${LOG[DEBUG]} >= ${LOG[${LOG_LEVEL}]} )); # https://mywiki.wooledge.org/ArithmeticExpression
    export LOG_INFO=$(( ${LOG[INFO]} >= ${LOG[${LOG_LEVEL}]} )); # https://bash-hackers.docs.cern.ch/syntax/arith_expr
    (( "${LOG_DEBUG}" )) && [[ -z "${NO_COLOR}" ]] && export DEBUG_FMT="$(tput setaf 8)%s$(tput sgr0)\n"; # DEBUG_FMT='\033[90m%s\033[0m\n' 
    (( "${LOG_INFO}" )) && [[ -z "${NO_COLOR}" ]] && export INFO_FMT="$(tput setaf 2)%s$(tput sgr0)\n"; # INFO_FMT='\033[32m%s\033[0m\n' 
    alias log.debug.filepath='(( "${LOG_DEBUG}" )) && printf "${DEBUG_FMT}" "${BASH_SOURCE[0]}"'; # "$(realpath "${BASH_SOURCE[0]}")" # [How do I determine the location of my script?](https://mywiki.wooledge.org/BashFAQ/028)
    alias log.info.filepath='(( "${LOG_INFO}" )) && printf "${INFO_FMT}" "${BASH_SOURCE[0]}"'; # "$(realpath "${BASH_SOURCE[0]}")" # [Reliable way for a Bash script to get the full path to itself](https://stackoverflow.com/a/11114547)
}

function path.executable(){
    # check whether argument is found in `$PATH` and whether it is executable.
    local executable_path;
    executable_path="$(command -v "$1")" && [[ -x "${executable_path}" ]]
}

function source.dir(){
    # [How to source all files in a directory?](https://stackoverflow.com/a/12426672) [Sourcing Files in Bash Profile using Wildcard](https://askubuntu.com/a/1271269/1987701)
    local file dir="${1%*/}"; # strip trailing '/' [https://mywiki.wooledge.org/BashFAQ/100#Removing_part_of_a_string]
    for file in "${dir}"/[!.]*; do # matching_files="$(compgen -G "${dir}/${glob}")"; # [How can I check whether a directory is empty or not?](https://mywiki.wooledge.org/BashFAQ/004)
        [[ -f "${file}" ]] && source "${file}";
    done;
}

function xdg(){
    # [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables)
    # [XDG Base Directory](https://wiki.archlinux.org/index.php/XDG_Base_Directory)
    local bash_source="$(realpath "${BASH_SOURCE[0]}")"; # [How do I determine the location of my script?](https://mywiki.wooledge.org/BashFAQ/028) [Reliable way for a Bash script to get the full path to itself](https://stackoverflow.com/a/11114547)
    export XDG_CACHE_HOME="${HOME}/.cache"; # contains user-specific non-essential data files
    export XDG_CONFIG_DIRS='/etc/xdg'; # preference-ordered set of base directories to search for configuration files in addition to the $XDG_CONFIG_HOME
    export XDG_CONFIG_HOME="$(realpath "${bash_source%/*}/../")"; # "${HOME}/.config"; # contains user-specific configuration files [$XDG_CONFIG_HOME is considered more important than any of the base directories defined by $XDG_CONFIG_DIRS]
    export XDG_DATA_DIRS='/usr/local/share:/usr/share'; # preference-ordered set of base directories to search for data files in addition to the $XDG_DATA_HOME
    export XDG_DATA_HOME="${HOME}/.local/share"; # contains user-specific data files [$XDG_DATA_HOME is considered more important than any of the base directories defined by $XDG_DATA_DIRS]
    export XDG_STATE_HOME="${HOME}/.local/state"; # contains user-specific state files that should persist between (application) restarts
    export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-"/run/user/${UID}"}"; # contains user-specific non-essential runtime files and other file objects (such as sockets, named pipes, ...)
}

xdg;

filepath.logger;

log.info.filepath;

export -f filepath.logger source.dir; # [Can I "export" functions in bash?](https://unix.stackexchange.com/a/22867/663009)

source.dir "${XDG_CONFIG_HOME}/bash/env/";
source.dir "${XDG_CONFIG_HOME}/private/bash/env/";
source "${XDG_CONFIG_HOME}/bash/bashrc";
