#!/usr/bin/env bash

[[ -v BASH ]] || return 0; # [BASH](https://bash-hackers.docs.cern.ch/syntax/shellvars#bash) [Misc syntax](https://bash-hackers.docs.cern.ch/commands/classictest#misc_syntax)

[[ $- == *i* ]] || return 0; # [How return from .bashrc if not run interactively?](https://askubuntu.com/a/1070182)

declare -A -g LOG=(['NOTSET']=0 ['DEBUG']=10 ['INFO']=20 ['WARNING']=30 ['ERROR']=40 ['CRITICAL']=50); # https://docs.python.org/3/howto/logging.html#logging-levels
declare -A -g TXT; # [before BASH 4.2, associative array must be declared outside function in order to be global](https://stackoverflow.com/a/10806853/13019084)

# Define an alias to pass "$FUNCNAME", positional parameters, and an ASCII "record separator" delimiter to `function.args` before passing the variable names.
# Set a trap on `ERR` signal to force the parent function to break if `function.args` returns 64.
alias args=$'trap "(( \$? == 64 )) && return 22" ERR; function.args "${FUNCNAME}" "$@" $\'\\030\''; # [https://bash-hackers.docs.cern.ch/commands/builtin/trap] [How to trap exit code in Bash script](https://stackoverflow.com/a/23637952/13019084) [Escaping characters in bash alias](https://stackoverflow.com/a/42954517)

function ansi(){
    # [How can I print text in various colors?](https://mywiki.wooledge.org/BashFAQ/037)
    # [Terminal codes (ANSI/VT100) introduction](https://bash-hackers.docs.cern.ch/scripting/terminalcodes)
    # [Coloring Terminal Text: tput and ANSI Escape Sequences](https://www.codequoi.com/en/coloring-terminal-text-tput-and-ansi-escape-sequences/)
    [[ -n "${NO_COLOR}" ]] && return 0;
    local i;
    declare -a fg=('black' 'red' 'green' 'yellow' 'blue' 'magenta' 'cyan' 'white' 'BLACK' 'RED' 'GREEN' 'YELLOW' 'BLUE' 'MAGENTA' 'CYAN' 'WHITE');
    declare -A attr=(['reset']='sgr0' ['bold']='bold' ['dim']='dim' ['italic']='sitm' ['underline']='smul' ['blink']='blink' ['reverse']='rev' ['invisible']='invis' ['strikethrough']='smxx');
                    # ['clear']='sgr0' ['bright']='bold' ['faint']='dim' ['italics']='sitm' ['uline']='smul' ['flicker']='blink' ['invert']='rev' ['hide']='invis' ['strikeout']='smxx');
    for ((i=0; i<=${#fg[@]}-1; i++)); do
        TXT["${fg[$i]}"]="$(tput setaf $i)";
        TXT["${fg[$i]}BG"]="$(tput setab $i)";
    done;
    for i in "${!attr[@]}"; do
        TXT["$i"]="$(tput "${attr[$i]}")";
    done;
}

ascii_silhouettify(){
    # [[ -f "${XDG_CONFIG_HOME}/bash/CERN_LogoBadge.txt" ]] && cat "${XDG_CONFIG_HOME}/bash/CERN_LogoBadge.txt"
    [[ -f "${XDG_CONFIG_HOME}/bash/CMSlogo_color_nolabel_1024_May2014.txt" ]] && cat "${XDG_CONFIG_HOME}/bash/CMSlogo_color_nolabel_1024_May2014.txt"
}

function assign.indirect(){
    # [Assigning indirect/reference variables](https://mywiki.wooledge.org/BashFAQ/006#Assigning_indirect.2Freference_variables)
    # [How to use a variable's value as another variable's name in bash](https://stackoverflow.com/a/9715739/13019084)
    read -r -- "$1" <<< "$2"; # [https://bash-hackers.docs.cern.ch/commands/builtin/read]
    # -r        do not allow backslashes to escape any characters
    log DEBUG "$(declare -p "$1")"; # [https://bash-hackers.docs.cern.ch/commands/builtin/declare]
}

function function.args(){
    # Convenience metafunction to define function arguments, including optional arguments with default values
    # It expects "$FUNCNAME" (name of parent function), followed by the positional parameters passed to the parent function, folowed by an ASCII "record separator" delimiter, followed by the variable names for the parent function's required & optional arguments
    # The passed positional parameters are assigned to the variable names as global variables (use `local` keyword in parent function to specify local variables)
    # A default value for optional arguments may be specified following ':=', e.g. `optional_argument:=default_value`
    # When calling the parent function, optional positional parameters may be ommited with a quoted empty string, ''
    # If any required parameters are missing, the expected usage (with the expected positional parameters) is printed and an exit code of 64 is returned
    local function_name param arg opt_arg default_value; # [https://bash-hackers.docs.cern.ch/commands/builtin/local]
    assignment_regex='([[:print:]]+):=([[:print:]]+)'; # matches and groups one or more 'printable' character(s) followed by ':=' and matches and groups the following one or more 'printable' character(s).

    function_name="$1"; # [https://bash-hackers.docs.cern.ch/syntax/shellvars#funcname]
    shift; # [https://bash-hackers.docs.cern.ch/commands/builtin/shift]
    while (( "$#" > 0 )); do
        [[ "$1" == $'\030' ]] && { shift; break; }; # [Octal 34 is the ASCII "file separator" character, and is unlikely to be present in your data](https://unix.stackexchange.com/a/628543) [https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text] [https://bash-hackers.docs.cern.ch/scripting/posparams#mass_usage]
        param+=("$1");
        shift;
    done;
    while (( "$#" > 0 )); do
        arg+=("$1");
        shift;
    done;

    for (( i=0; i<${#arg[@]}; i++ )); do
        if ! [[ "${arg[i]}" =~ ${assignment_regex} ]]; then # required arguments (no default value assignment)
            [[ -z "${param[i]}" ]] && { printf "%s: ${TXT[red]}%s\n${TXT[reset]}" "usage" "${function_name} ${arg[*]}"; return 64; } # [https://bash-hackers.docs.cern.ch/syntax/arrays#getting_values]
            [[ -n "${param[i]}" ]] && assign.indirect "${arg[i]}" "${param[i]}";
        elif [[ "${arg[i]}" =~ ${assignment_regex} ]]; then # optional arguments (default value is assigned)
            opt_arg="${BASH_REMATCH[1]}"; # regex match group of characters before ':='
            default_value="${BASH_REMATCH[2]}"; # regex match group of characters after ':='
            [[ -n "${param[i]}" ]] && assign.indirect "${opt_arg}" "${param[i]}";
            [[ -z "${param[i]}" ]] && assign.indirect "${opt_arg}" "${default_value}";
        fi
    done
}

function function.requires(){
    # check whether the provided argument is found in `$PATH` and whether it is executable.
    local executable_path;
    executable_path="$(type -P "$1")" && [[ -x "${executable_path}" ]] && return 0; # `type -P` force a PATH search for each NAME, even if it is an alias, builtin, or function, and returns the name of the disk file that would be executed
    log ERROR "'$1' is required" && return 1;
}

function log(){
    # [Simple logging levels in Bash](https://stackoverflow.com/a/48087251/13019084)
    local log_priority="$1";
    log.level "${log_priority}" || return 0;
    local message="${log_priority}: $2";
    (( LOG["${log_priority}"] >= LOG['INFO'] )) && local date_time="$(date +'%Y-%m-%d %H:%M:%S.%3N')" || local date_time="${EPOCHREALTIME}";
    local date_time_fmt="${TXT['dim']}${date_time}${TXT['reset']}";
    local pad="$(( "${COLUMNS}" - "${#message}" + ${#date_time_fmt} - ${#date_time} ))"; # compensate for text formatting around `${date_time}`
    message="$(log.message "${log_priority}" "${message}")";
    printf "%s%${pad}s\n" "${message}" "${date_time_fmt}"; # [printf modifiers](https://bash-hackers.docs.cern.ch/commands/builtin/printf#modifiers)
}

function log.level(){
    # verify that `log_priority` is valid key for `LOG` and check whether `log_priority` exceeds `LOG_LEVEL`.
    local log_priority="$1";
    [[ -z "${LOG[${log_priority}]}" ]] && log ERROR "'${log_priority}' is not a valid log level (must be one of: ${!LOG[*]})" && return 1;
    (( ${LOG[${log_priority}]} >= ${LOG[${LOG_LEVEL}]} ))
}

function log.message(){
    # apply text formatting around `message` based on the value of `log_priority`.
    local log_priority="$1" message="$2";
    case "${log_priority}" in
        DEBUG) message="${TXT['BLACK']}${message}${TXT['reset']}";;
        INFO) message="${TXT['green']}${message}${TXT['reset']}";;
        WARNING) message="${TXT['yellow']}${message}${TXT['reset']}";;
        ERROR) message="${TXT['red']}${message}${TXT['reset']}";;
        CRITICAL) message="${TXT['blink']}${TXT['red']}${message}${TXT['reset']}";;
        *) return 1;
    esac
    printf '%s\n' "${message}";
}

function execute.line_by_line(){
    # read each line in `input_file` (ignoring all characters after "#" and stripping leading/trailing whitespaces) provide each line as an argument to `function`
    # [How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?](http://mywiki.wooledge.org/BashFAQ/001)
    local function input_file value comment;
    function="$1";
    input_file="$2";
    while IFS='#' read -r value comment; do
        value="${value%%+([[:space:]])}"; # [How do I trim leading and trailing whitespace from each line of some output?](https://unix.stackexchange.com/a/360648)
        [[ -n "${value}" ]] && "${function}" "${value}";
    done < "${input_file}";
}

ansi;

filepath.logger; # defines `log.debug.filepath` and `log.info.filepath` aliases (see `bash/profile`)

log.info.filepath;

source "${XDG_CONFIG_HOME}/bash/shopt";
source.dir "${XDG_CONFIG_HOME}/bash/functions/"; # (see `bash/profile`)
source.dir "${XDG_CONFIG_HOME}/bash/aliases/";
source.dir "${XDG_CONFIG_HOME}/bash/prompt/";
source.dir "${XDG_CONFIG_HOME}/private/bash/functions/";

ascii_silhouettify
